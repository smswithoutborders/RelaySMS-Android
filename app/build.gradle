plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23'
    id "com.google.protobuf"
    alias(libs.plugins.compose.compiler)
}


def versionsPropertiesFile = rootProject.file("version.properties")
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionsPropertiesFile))

android {
    compileSdk 35

    buildFeatures {
        viewBinding true
    }

    def _versionName = versionProperties['versionName']
    def tagVersion = Integer.parseInt(versionProperties['tagVersion'])

    println(tagVersion)

    defaultConfig {
        applicationId "com.afkanerd.sw0b"
        minSdk 24
        targetSdk 35
        versionCode tagVersion
        versionName _versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
        resourceConfigurations += ['en', 'fr', 'fa', 'es', 'tr']

        manifestPlaceholders =
                ['appAuthRedirectScheme': 'oauth.afkanerd.com']

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "IS_RECAPTCHA", "false")
            buildConfigField("Boolean", "IS_ONBOARDING", "false")
            buildConfigField("Boolean", "IS_SHOWALL_ONBOARDING", "false")
        }
        debug {
            buildConfigField("Boolean", "IS_RECAPTCHA", "false")
            buildConfigField("Boolean", "IS_ONBOARDING", "false")
            // Does not skip the onboarding screens
            buildConfigField("Boolean", "IS_SHOWALL_ONBOARDING", "true")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    lint {
        checkReleaseBuilds false
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose = true
    }

    namespace 'com.example.sw0b_001'
}

//repositories {
//	def releasePropertiesFile = rootProject.file("release.properties")
//	def releaseProperties = new Properties()
//	releaseProperties.load(new FileInputStream(releasePropertiesFile))
//    maven {
//        url = uri("https://maven.pkg.github.com/smswithoutborders/lib_signal_double_ratchet_java")
//        credentials {
//            username = releaseProperties['github_username']
//            password = releaseProperties['github_token']
//        }
//    }
//}


import org.apache.tools.ant.taskdefs.condition.Os

// Compatible with macOS on Apple Silicon
def archSuffix = Os.isFamily(Os.FAMILY_MAC) ? ':osx-x86_64' : ''
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.27.0"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.64.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
//                javalite {}
                grpc { option 'lite' }
            }
            task.builtins {
                java { option 'lite' }
            }
        }
    }
}

configurations {
    implementation.exclude module:'protobuf-javalite'
}


dependencies {
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.annotation
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.preference
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.baselibrary
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.activity
    implementation libs.play.services.auth
    implementation libs.play.services.auth.api.phone
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    // Java language implementation
    implementation libs.androidx.fragment

    implementation libs.volley
    implementation libs.circleimageview

    implementation libs.androidx.room.runtime
    annotationProcessor libs.androidx.room.compiler


    // (Java only)
    implementation libs.androidx.work.runtime
//    implementation 'com.budiyev.android:code-scanner:2.1.0'


    implementation libs.androidx.biometric

    implementation libs.dots

    implementation libs.kotlinx.serialization.json
    testImplementation libs.kotlinx.coroutines.test//

    implementation libs.fuel //for JVM
    testImplementation libs.fuel //for JVM

     implementation libs.fuel.android //for Android
    implementation libs.fuel.coroutines
    implementation libs.androidx.swiperefreshlayout

    implementation libs.androidx.startup.runtime
    implementation libs.armadillo
    implementation libs.smswithoutborders.libsignal
    implementation libs.appauth
    implementation libs.ccp

    implementation libs.okhttp
    implementation libs.javax.annotation.api
    implementation libs.grpc.core
    implementation libs.grpc.stub
    implementation libs.grpc.okhttp
    implementation(libs.grpc.protobuf.lite) {
        exclude module: "protobuf-lite"
    }

//     Add protobuf-java dependency
    implementation libs.protobuf.java

    implementation libs.fernet.java8

    implementation(libs.androidx.material)
}

